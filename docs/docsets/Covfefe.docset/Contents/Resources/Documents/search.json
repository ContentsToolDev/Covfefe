{"Typealiases.html#/s:7Covfefe9ParseTreea":{"name":"ParseTree","abstract":"<p>A syntax tree with non-terminal keys and string range leafs.</p>"},"Structs/DefaultTokenizer.html#/s:7Covfefe16DefaultTokenizerV7grammarAcA7GrammarV_tcfc":{"name":"init(grammar:)","abstract":"<p>Creates a new tokenizer using a Chomsky normalized grammar</p>","parent_name":"DefaultTokenizer"},"Structs/DefaultTokenizer.html#/s:7Covfefe16DefaultTokenizerV8tokenizeySaySayAA8TerminalO8terminal_SnySS5IndexVG5rangetGGSSKF":{"name":"tokenize(_:)","abstract":"<p>Tokenizes the given word and returns a sequence of possible tokens for each unit of the string</p>","parent_name":"DefaultTokenizer"},"Structs/NonTerminal.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"NonTerminal"},"Structs/NonTerminal.html#/s:7Covfefe11NonTerminalV4nameSSvp":{"name":"name","abstract":"<p>Name of the non-terminal</p>","parent_name":"NonTerminal"},"Structs/NonTerminal.html#/s:SH9hashValueSivp":{"name":"hashValue","parent_name":"NonTerminal"},"Structs/NonTerminal.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"NonTerminal"},"Structs/NonTerminal.html#/s:7Covfefe11NonTerminalV4nameACSS_tcfc":{"name":"init(name:)","abstract":"<p>Creates a new non-terminal symbol with a given name</p>","parent_name":"NonTerminal"},"Structs/NonTerminal.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"NonTerminal"},"Structs/NonTerminal.html#/s:s26ExpressibleByStringLiteralP0cD4TypeQa":{"name":"StringLiteralType","parent_name":"NonTerminal"},"Structs/NonTerminal.html#/s:s26ExpressibleByStringLiteralP06stringD0x0cD4TypeQz_tcfc":{"name":"init(stringLiteral:)","parent_name":"NonTerminal"},"Structs/Production.html#/s:7Covfefe10ProductionV7patternAA11NonTerminalVvp":{"name":"pattern","abstract":"<p>Starting pattern</p>","parent_name":"Production"},"Structs/Production.html#/s:7Covfefe10ProductionV10productionSayAA6SymbolOGvp":{"name":"production","abstract":"<p>Symbols produced from the starting pattern</p>","parent_name":"Production"},"Structs/Production.html#/s:7Covfefe10ProductionV16nonTerminalChainSayAA03NonD0VGSgvp":{"name":"nonTerminalChain","abstract":"<p>Chain of non-terminals which have been eliminated during normalization</p>","parent_name":"Production"},"Structs/Production.html#/s:SH9hashValueSivp":{"name":"hashValue","parent_name":"Production"},"Structs/Production.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"Production"},"Structs/Production.html#/s:7Covfefe10ProductionV7pattern10productionAcA11NonTerminalV_AA0B6StringVtcfc":{"name":"init(pattern:production:)","abstract":"<p>Creates a new production</p>","parent_name":"Production"},"Structs/Production.html#/s:7Covfefe10ProductionV7pattern10production5chainAcA11NonTerminalV_SayAA6SymbolOGSayAHGSgtcfc":{"name":"init(pattern:production:chain:)","abstract":"<p>Creates a new production</p>","parent_name":"Production"},"Structs/Production.html#/s:7Covfefe10ProductionV7isFinalSbvp":{"name":"isFinal","abstract":"<p>A production is final if it only generates terminal symbols</p>","parent_name":"Production"},"Structs/Production.html#/s:7Covfefe10ProductionV21isInChomskyNormalFormSbvp":{"name":"isInChomskyNormalForm","abstract":"<p>A production is in Chomsky normal form if it generates exactly 2 non-terminals","parent_name":"Production"},"Structs/Production.html#/s:7Covfefe10ProductionV18generatedTerminalsSayAA8TerminalOGvp":{"name":"generatedTerminals","abstract":"<p>Sequence of terminals generated by this production</p>","parent_name":"Production"},"Structs/Production.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"Production"},"Structs/Production.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"Production"},"Structs/Production.html#/s:s28CustomDebugStringConvertibleP16debugDescriptionSSvp":{"name":"debugDescription","parent_name":"Production"},"Structs/SyntaxError/Reason.html#/s:7Covfefe11SyntaxErrorV6ReasonO15emptyNotAllowedyA2EmF":{"name":"emptyNotAllowed","abstract":"<p>An empty string was provided but the grammar does not allow empty productions</p>","parent_name":"Reason"},"Structs/SyntaxError/Reason.html#/s:7Covfefe11SyntaxErrorV6ReasonO12unknownTokenyA2EmF":{"name":"unknownToken","abstract":"<p>The tokenization could not be completed because no matching token was found</p>","parent_name":"Reason"},"Structs/SyntaxError/Reason.html#/s:7Covfefe11SyntaxErrorV6ReasonO16unmatchedPatternyA2EmF":{"name":"unmatchedPattern","abstract":"<p>A pattern was found which could not be merged</p>","parent_name":"Reason"},"Structs/SyntaxError/Reason.html#/s:7Covfefe11SyntaxErrorV6ReasonO15unexpectedTokenyA2EmF":{"name":"unexpectedToken","abstract":"<p>A token was found that was not expected</p>","parent_name":"Reason"},"Structs/SyntaxError/Reason.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"Reason"},"Structs/SyntaxError/Reason.html":{"name":"Reason","abstract":"<p>The reason for the syntax error</p>","parent_name":"SyntaxError"},"Structs/SyntaxError.html#/s:7Covfefe11SyntaxErrorV5rangeSnySS5IndexVGvp":{"name":"range","abstract":"<p>Range in which the error occurred</p>","parent_name":"SyntaxError"},"Structs/SyntaxError.html#/s:7Covfefe11SyntaxErrorV6reasonAC6ReasonOvp":{"name":"reason","abstract":"<p>Reason for the error</p>","parent_name":"SyntaxError"},"Structs/SyntaxError.html#/s:7Covfefe11SyntaxErrorV7contextSayAA11NonTerminalVGvp":{"name":"context","abstract":"<p>The context around the error</p>","parent_name":"SyntaxError"},"Structs/SyntaxError.html#/s:7Covfefe11SyntaxErrorV6stringSSvp":{"name":"string","abstract":"<p>The string for which the parsing was unsuccessful.</p>","parent_name":"SyntaxError"},"Structs/SyntaxError.html#/s:7Covfefe11SyntaxErrorV4lineSivp":{"name":"line","abstract":"<p>The line in which the error occurred.</p>","parent_name":"SyntaxError"},"Structs/SyntaxError.html#/s:7Covfefe11SyntaxErrorV6columnSivp":{"name":"column","abstract":"<p>Undocumented</p>","parent_name":"SyntaxError"},"Structs/SyntaxError.html#/s:7Covfefe11SyntaxErrorV5range2in6reason7contextACSnySS5IndexVG_SSAC6ReasonOSayAA11NonTerminalVGtcfc":{"name":"init(range:in:reason:context:)","abstract":"<p>Creates a new syntax error with a given range and reason</p>","parent_name":"SyntaxError"},"Structs/SyntaxError.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"SyntaxError"},"Structs/EarleyParser.html#/s:7Covfefe12EarleyParserV7grammarAA7GrammarVvp":{"name":"grammar","abstract":"<p>The grammar recognized by the parser</p>","parent_name":"EarleyParser"},"Structs/EarleyParser.html#/s:7Covfefe12EarleyParserV7grammarAcA7GrammarV_tcfc":{"name":"init(grammar:)","abstract":"<p>Generates an earley parser for the given grammar.</p>","parent_name":"EarleyParser"},"Structs/EarleyParser.html#/s:7Covfefe12EarleyParserV10syntaxTree3forAA06SyntaxE0OyAA11NonTerminalVSnySS5IndexVGGSS_tKF":{"name":"syntaxTree(for:)","abstract":"<p>Creates a syntax tree which explains how a word was derived from a grammar</p>","parent_name":"EarleyParser"},"Structs/EarleyParser.html#/s:7Covfefe12EarleyParserV14allSyntaxTrees3forSayAA0E4TreeOyAA11NonTerminalVSnySS5IndexVGGGSS_tKF":{"name":"allSyntaxTrees(for:)","abstract":"<p>Generates all syntax trees explaining how a word can be derived from a grammar.</p>","parent_name":"EarleyParser"},"Structs/ProductionResult.html#/s:7Covfefe16ProductionResultV8elementsSayAA0B6StringVGvp":{"name":"elements","abstract":"<p>The possible production strings of this result</p>","parent_name":"ProductionResult"},"Structs/ProductionResult.html#/s:7Covfefe16ProductionResultV7symbolsACSayAA0B6StringVG_tcfc":{"name":"init(symbols:)","abstract":"<p>Creates a new production result.</p>","parent_name":"ProductionResult"},"Structs/ProductionResult.html#/s:s25ExpressibleByArrayLiteralP0cD7ElementQa":{"name":"ArrayLiteralElement","parent_name":"ProductionResult"},"Structs/ProductionResult.html#/s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc":{"name":"init(arrayLiteral:)","parent_name":"ProductionResult"},"Structs/ProductionResult.html#/s:7Covfefe16ProductionResultVyAcA9SymbolSetVcfc":{"name":"init(_:)","abstract":"<p>Creates a new production result from a symbol set where every symbol generates a different result independent of other symbols</p>","parent_name":"ProductionResult"},"Structs/NonTerminalString.html#/s:7Covfefe17NonTerminalStringV10charactersSayAA0bC0VGvp":{"name":"characters","abstract":"<p>The non-terminal characters of this string</p>","parent_name":"NonTerminalString"},"Structs/NonTerminalString.html#/s:SH9hashValueSivp":{"name":"hashValue","parent_name":"NonTerminalString"},"Structs/NonTerminalString.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"NonTerminalString"},"Structs/NonTerminalString.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"NonTerminalString"},"Structs/ProductionString.html#/s:7Covfefe16ProductionStringV10charactersSayAA6SymbolOGvp":{"name":"characters","abstract":"<p>Symbols of this production string</p>","parent_name":"ProductionString"},"Structs/ProductionString.html#/s:7Covfefe16ProductionStringVyACSayAA6SymbolOGcfc":{"name":"init(_:)","abstract":"<p>Creates a new production string</p>","parent_name":"ProductionString"},"Structs/ProductionString.html#/s:s25ExpressibleByArrayLiteralP0cD7ElementQa":{"name":"ArrayLiteralElement","parent_name":"ProductionString"},"Structs/ProductionString.html#/s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc":{"name":"init(arrayLiteral:)","parent_name":"ProductionString"},"Structs/SymbolSet.html#/s:7Covfefe9SymbolSetV10whitespaceAA16ProductionResultVvpZ":{"name":"whitespace","abstract":"<p>Whitespace characters (space, tab and line break)</p>","parent_name":"SymbolSet"},"Structs/SymbolSet.html#/s:7Covfefe9SymbolSetV9lowercaseAA16ProductionResultVvpZ":{"name":"lowercase","abstract":"<p>Lower case letters a to z</p>","parent_name":"SymbolSet"},"Structs/SymbolSet.html#/s:7Covfefe9SymbolSetV9uppercaseAA16ProductionResultVvpZ":{"name":"uppercase","abstract":"<p>Upper case letters A to Z</p>","parent_name":"SymbolSet"},"Structs/SymbolSet.html#/s:7Covfefe9SymbolSetV7numbersAA16ProductionResultVvpZ":{"name":"numbers","abstract":"<p>Decimal digits 0 to 9</p>","parent_name":"SymbolSet"},"Structs/SymbolSet.html#/s:7Covfefe9SymbolSetV7lettersAA16ProductionResultVvpZ":{"name":"letters","abstract":"<p>Lower and upper case letters a to z and A to Z</p>","parent_name":"SymbolSet"},"Structs/SymbolSet.html#/s:7Covfefe9SymbolSetV13alphanumericsAA16ProductionResultVvpZ":{"name":"alphanumerics","abstract":"<p>Alphanumeric characters (Letters and numbers)</p>","parent_name":"SymbolSet"},"Structs/SymbolSet.html#/s:7Covfefe9SymbolSetV7symbolsSayAA0B0OGvp":{"name":"symbols","abstract":"<p>Symbols contained in this symbol set</p>","parent_name":"SymbolSet"},"Structs/SymbolSet.html#/s:7Covfefe9SymbolSetVyACxcSTRzAA0B0O7ElementRtzlufc":{"name":"init(_:)","abstract":"<p>Creates a new symbol set given a sequence of symbols</p>","parent_name":"SymbolSet"},"Structs/CYKParser.html#/s:7Covfefe9CYKParserV7grammarAA7GrammarVvp":{"name":"grammar","abstract":"<p>The grammar which the parser recognizes</p>","parent_name":"CYKParser"},"Structs/CYKParser.html#/s:7Covfefe9CYKParserV7grammarAcA7GrammarV_tcfc":{"name":"init(grammar:)","abstract":"<p>Initializes a CYK parser which recognizes the given grammar.</p>","parent_name":"CYKParser"},"Structs/CYKParser.html#/s:7Covfefe9CYKParserV10syntaxTree3forAA06SyntaxD0OyAA11NonTerminalVSnySS5IndexVGGSS_tKF":{"name":"syntaxTree(for:)","abstract":"<p>Creates a syntax tree which explains how a word was derived from a grammar</p>","parent_name":"CYKParser"},"Structs/CYKParser.html#/s:7Covfefe9CYKParserV14allSyntaxTrees3forSayAA0D4TreeOyAA11NonTerminalVSnySS5IndexVGGGSS_tKF":{"name":"allSyntaxTrees(for:)","abstract":"<p>Generates all syntax trees explaining how a word can be derived from a grammar.</p>","parent_name":"CYKParser"},"Structs/Grammar.html#/s:7Covfefe7GrammarV11productionsSayAA10ProductionVGvp":{"name":"productions","abstract":"<p>Productions for generating words of the language generated by this grammar</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV5startAA11NonTerminalVvp":{"name":"start","abstract":"<p>Root non-terminal</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV11productions5startACSayAA10ProductionVG_AA11NonTerminalVtcfc":{"name":"init(productions:start:)","abstract":"<p>Creates a new grammar with a given set of productions and a start non-terminal</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV4abnf5startACSS_SStKcfc":{"name":"init(abnf:start:)","abstract":"<p>Creates a grammar from the production rules defined in the provided ABNF grammar.</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV3bnf5startACSS_SStKcfc":{"name":"init(bnf:start:)","abstract":"<p>Creates a new grammar from a specification in Backus-Naur Form (BNF)</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV4ebnf5startACSS_SStKcfc":{"name":"init(ebnf:start:)","abstract":"<p>Creates a new grammar from a specification in Extended Backus-Naur Form (EBNF)</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV3bnfSSvp":{"name":"bnf","abstract":"<p>Returns a Backus-Naur form representation of the grammar.</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV4ebnfSSvp":{"name":"ebnf","abstract":"<p>Returns a Extended Backus-Naur form representation of the grammar.</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV4abnfSSvp":{"name":"abnf","abstract":"<p>Returns a Augmented Backus-Naur form representation of the grammar.</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV21isInChomskyNormalFormSbvp":{"name":"isInChomskyNormalForm","abstract":"<p>Returns true, if the grammar is in chomsky normal form.</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV23unreachableNonTerminalsShyAA0D8TerminalVGvp":{"name":"unreachableNonTerminals","abstract":"<p>Non-terminals which cannot be reached from the start non-terminal</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV24unterminatedNonTerminalsShyAA0D8TerminalVGvp":{"name":"unterminatedNonTerminals","abstract":"<p>Nonterminals which can never produce a sequence of terminals","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV17chomskyNormalizedACyF":{"name":"chomskyNormalized()","abstract":"<p>Generates a context free grammar equal to the current grammar which is in Chomsky Normal Form.","parent_name":"Grammar"},"Structs/Grammar.html#/s:7Covfefe7GrammarV06prefixB0ACyF":{"name":"prefixGrammar()","abstract":"<p>Generates a grammar which recognizes all prefixes of the original grammar.</p>","parent_name":"Grammar"},"Structs/Grammar.html":{"name":"Grammar","abstract":"<p>A context free or regular grammar"},"Structs/CYKParser.html":{"name":"CYKParser","abstract":"<p>A parser based on the CYK algorithm.</p>"},"Structs/SymbolSet.html":{"name":"SymbolSet","abstract":"<p>A set of terminal or non-terminal symbols</p>"},"Structs/ProductionString.html":{"name":"ProductionString","abstract":"<p>A string of symbols which can be used in a production of a grammar</p>"},"Structs/NonTerminalString.html":{"name":"NonTerminalString","abstract":"<p>A string of non-terminal symbols</p>"},"Structs/ProductionResult.html":{"name":"ProductionResult","abstract":"<p>A production result contains multiple possible production strings"},"Structs/EarleyParser.html":{"name":"EarleyParser","abstract":"<p>A parser generator implementation that internally uses"},"Structs/SyntaxError.html":{"name":"SyntaxError","abstract":"<p>A syntax error which was generated during parsing or tokenization</p>"},"Structs/Production.html":{"name":"Production","abstract":"<p>A production describing what symbols can be generated starting from a given non-terminal pattern</p>"},"Structs/NonTerminal.html":{"name":"NonTerminal","abstract":"<p>A non-terminal symbol, which cannot occurr in a word recognized by a parser</p>"},"Structs/DefaultTokenizer.html":{"name":"DefaultTokenizer","abstract":"<p>A simple tokenizer which uses a all terminals in a grammar for tokenization.</p>"},"Protocols/Tokenizer.html#/s:7Covfefe9TokenizerP8tokenizeySaySayAA8TerminalO8terminal_SnySS5IndexVG5rangetGGSSKF":{"name":"tokenize(_:)","abstract":"<p>Tokenizes the given word and returns a sequence of possible tokens for each unit of the string</p>","parent_name":"Tokenizer"},"Protocols/AmbiguousGrammarParser.html#/s:7Covfefe22AmbiguousGrammarParserP14allSyntaxTrees3forSayAA0F4TreeOyAA11NonTerminalVSnySS5IndexVGGGSS_tKF":{"name":"allSyntaxTrees(for:)","abstract":"<p>Generates all syntax trees explaining how a word can be derived from a grammar.</p>","parent_name":"AmbiguousGrammarParser"},"Protocols/Parser.html#/s:7Covfefe6ParserP10syntaxTree3forAA06SyntaxD0OyAA11NonTerminalVSnySS5IndexVGGSS_tKF":{"name":"syntaxTree(for:)","abstract":"<p>Creates a syntax tree which explains how a word was derived from a grammar</p>","parent_name":"Parser"},"Protocols/Parser.html#/s:7Covfefe6ParserPAAE10recognizesySbSSF":{"name":"recognizes(_:)","abstract":"<p>Returns true if the recognized language contains the given tokenization.</p>","parent_name":"Parser"},"Protocols/Parser.html":{"name":"Parser","abstract":"<p>A parser which can check if a word is in a language"},"Protocols/AmbiguousGrammarParser.html":{"name":"AmbiguousGrammarParser","abstract":"<p>A parser that can parse ambiguous grammars and retrieve every possible syntax tree</p>"},"Protocols/Tokenizer.html":{"name":"Tokenizer","abstract":"<p>A string tokenizer which tokenizes a string based on final productions of a context free grammar.</p>"},"Functions.html#/s:7Covfefe3lpgoiyAA16ProductionStringVAD_ADtF":{"name":"<+>(_:_:)","abstract":"<p>Concatenates two production strings</p>"},"Functions.html#/s:7Covfefe3lpgoiyAA16ProductionStringVAD_AA6SymbolOtF":{"name":"<+>(_:_:)","abstract":"<p>Concatenates a production string and a symbol</p>"},"Functions.html#/s:7Covfefe3lpgoiyAA16ProductionStringVAA6SymbolO_ADtF":{"name":"<+>(_:_:)","abstract":"<p>Concatenates a production string and a symbol</p>"},"Functions.html#/s:7Covfefe3lpgoiyAA16ProductionStringVAA6SymbolO_AFtF":{"name":"<+>(_:_:)","abstract":"<p>Concatenates two production symbols into a production string</p>"},"Functions.html#/s:7Covfefe3lpgoiyAA16ProductionResultVAD_ADtF":{"name":"<+>(_:_:)","abstract":"<p>Concatenates every possible production of the first production result with"},"Functions.html#/s:7Covfefe3lpgoiyAA16ProductionResultVAD_AA0C6StringVtF":{"name":"<+>(_:_:)","abstract":"<p>Concatenates every production string of the production result with the given production string</p>"},"Functions.html#/s:7Covfefe3lpgoiyAA16ProductionResultVAA0C6StringV_ADtF":{"name":"<+>(_:_:)","abstract":"<p>Concatenates the given production string with every production string of the production result</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAD_ADtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result containing every production string of the given production results</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAD_AA0C6StringVtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result containing every production of the left production result and the production string</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAA0C6StringV_ADtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result containing the left production string and every production of the right production string</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAA0C6StringV_AFtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result containing the left and right production string</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAA0C6StringV_AA6SymbolOtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result containing the left production string and the right symbol</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAA6SymbolO_AA0C6StringVtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result containing the left symbol and the right production string</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAD_AA6SymbolOtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result by appending the right symbol to the left production result</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAA6SymbolO_ADtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result by appending the left symbol to the right production result</p>"},"Functions.html#/s:7Covfefe3logoiyAA16ProductionResultVAA6SymbolO_AFtF":{"name":"<|>(_:_:)","abstract":"<p>Generates a production result containing the left and right symbol</p>"},"Functions.html#/s:7Covfefe3ssgoiyAA10ProductionVAA11NonTerminalV_AA0C6StringVtF":{"name":"-->(_:_:)","abstract":"<p>Generates a production from a given non-terminal and produced sequence of symbols</p>"},"Functions.html#/s:7Covfefe3ssgoiySayAA10ProductionVGAA11NonTerminalV_AA0C6ResultVtF":{"name":"-->(_:_:)","abstract":"<p>Generates a set of productions from a given non-terminal and produced result</p>"},"Functions.html#/s:7Covfefe3ssgoiyAA10ProductionVAA11NonTerminalV_AA6SymbolOtF":{"name":"-->(_:_:)","abstract":"<p>Generates a production from the given non-terminal to the given symbol</p>"},"Functions.html#/s:7Covfefe1tyAA6SymbolOSSF":{"name":"t(_:)","abstract":"<p>Creates a new non-regular terminal symbol</p>"},"Functions.html#/s:7Covfefe1nyAA6SymbolOSSF":{"name":"n(_:)","abstract":"<p>Creates a new non-terminal symbol</p>"},"Functions.html#/s:7Covfefe2rtyAA6SymbolOSSKF":{"name":"rt(_:)","abstract":"<p>Creates a new regular terminal symbol</p>"},"Functions.html#/s:7Covfefe2eeoiySbAA10SyntaxTreeOyxq_G_AEtSQRzSQR_r0_lF":{"name":"==(_:_:)","abstract":"<p>Determines if two syntax trees are equal to each other.</p>"},"Extensions/ClosedRange.html#/hashValue":{"name":"hashValue","parent_name":"ClosedRange"},"Extensions/Character.html#/s:SE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","parent_name":"Character"},"Extensions/Character.html#/s:Se4fromxs7Decoder_p_tKcfc":{"name":"init(from:)","parent_name":"Character"},"Extensions/String.html#/s:SS7CovfefeE7matches3forSaySnySS5IndexVGGSS_tKF":{"name":"matches(for:)","abstract":"<p>Returns the ranges of all matches of a regular expression which is provided as the pattern argument</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE7matches3forSaySnySS5IndexVGGSo19NSRegularExpressionC_tF":{"name":"matches(for:)","abstract":"<p>Returns the ranges of all matches of the provided regular expression</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE7matches3for2inSaySnySS5IndexVGGSS_AGtKF":{"name":"matches(for:in:)","abstract":"<p>Returns the ranges of all matches of a regular expression which is provided as the pattern argument</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE7matches3for2inSaySnySS5IndexVGGSo19NSRegularExpressionC_AGtF":{"name":"matches(for:in:)","abstract":"<p>Returns the ranges of all matches of the provided regular expression</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE16hasRegularPrefixySbSSKF":{"name":"hasRegularPrefix(_:)","abstract":"<p>Returns a boolean value indicating that the string has a prefix which can be matched by the given regular expression</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE16hasRegularPrefixySbSo19NSRegularExpressionCF":{"name":"hasRegularPrefix(_:)","abstract":"<p>Returns a boolean value indicating that the string has a prefix which can be matched by the given regular expression</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE16hasRegularPrefix_4fromSbSS_SS5IndexVtKF":{"name":"hasRegularPrefix(_:from:)","abstract":"<p>Returns a boolean value indicating that the string has a prefix beginning at the given start index","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE16hasRegularPrefix_4fromSbSo19NSRegularExpressionC_SS5IndexVtF":{"name":"hasRegularPrefix(_:from:)","abstract":"<p>Returns a boolean value indicating that the string has a prefix beginning at the given start index","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE20rangeOfRegularPrefixySnySS5IndexVGSgSSKF":{"name":"rangeOfRegularPrefix(_:)","abstract":"<p>Returns the range of a match for the given regular expression beginning at the start of the string</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE20rangeOfRegularPrefixySnySS5IndexVGSgSo19NSRegularExpressionCF":{"name":"rangeOfRegularPrefix(_:)","abstract":"<p>Returns the range of a match for the given regular expression beginning at the start of the string</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE20rangeOfRegularPrefix_4fromSnySS5IndexVGSgSS_AEtKF":{"name":"rangeOfRegularPrefix(_:from:)","abstract":"<p>Returns the range of a match for the given regular expression beginning at the start of the string</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE20rangeOfRegularPrefix_4fromSnySS5IndexVGSgSo19NSRegularExpressionC_AEtF":{"name":"rangeOfRegularPrefix(_:from:)","abstract":"<p>Returns the range of a match for the given regular expression beginning at the start of the string</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE16hasRegularSuffixySbSSKF":{"name":"hasRegularSuffix(_:)","abstract":"<p>Returns a boolean value indicating that the string ends with a substring matched by the given regular expression</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE16hasRegularSuffixySbSo19NSRegularExpressionCF":{"name":"hasRegularSuffix(_:)","abstract":"<p>Returns a boolean value indicating that the string ends with a substring matched by the given regular expression</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE20rangeOfRegularSuffixySnySS5IndexVGSgSSKF":{"name":"rangeOfRegularSuffix(_:)","abstract":"<p>Returns the range of a substring matched by the given regular expression ending at the end index of the string</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE20rangeOfRegularSuffixySnySS5IndexVGSgSo19NSRegularExpressionCKF":{"name":"rangeOfRegularSuffix(_:)","abstract":"<p>Returns the range of a substring matched by the given regular expression ending at the end index of the string</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE9hasPrefixySbAA8TerminalOF":{"name":"hasPrefix(_:)","abstract":"<p>Returns a boolean value indicating that the string has a prefix described by the given terminal symbol.</p>","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE9hasPrefix_4fromSbAA8TerminalO_SS5IndexVtF":{"name":"hasPrefix(_:from:)","abstract":"<p>Returns a boolean value indicating that the string has a prefix from the given start index described by the given","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE13rangeOfPrefix_4fromSnySS5IndexVGSgAA8TerminalO_AEtF":{"name":"rangeOfPrefix(_:from:)","abstract":"<p>Returns the range of the prefix described by the given sequence of terminal symbols","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE20replacingOccurrencesySSxSTRzSS_SSt7ElementRtzlF":{"name":"replacingOccurrences(_:)","abstract":"<p>Performs replacements using the given replacement rules.","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE14literalEscapedSSvp":{"name":"literalEscaped","abstract":"<p>Escapes all special characters that need to be escaped to be escaped for the string to be printed as a string literal.","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE25singleQuoteLiteralEscapedSSvp":{"name":"singleQuoteLiteralEscaped","abstract":"<p>Escapes all special characters that need to be escaped to be escaped for the string to be printed as a string literal enclosed by single quotes.","parent_name":"String"},"Extensions/String.html#/s:SS7CovfefeE25doubleQuoteLiteralEscapedSSvp":{"name":"doubleQuoteLiteralEscaped","abstract":"<p>Escapes all special characters that need to be escaped to be escaped for the string to be printed as a string literal enclosed by double quotes.","parent_name":"String"},"Extensions/String.html":{"name":"String"},"Extensions/Character.html":{"name":"Character"},"Extensions/ClosedRange.html":{"name":"ClosedRange"},"Enums/Terminal.html#/s:7Covfefe8TerminalO6stringyACSS_SitcACmF":{"name":"string(string:hash:)","abstract":"<p>A terminal that is a string. The terminal is matched when the tokenized subsequence of a word is equal to this string.</p>","parent_name":"Terminal"},"Enums/Terminal.html#/s:7Covfefe8TerminalO14characterRangeyACSNySJG_SitcACmF":{"name":"characterRange(range:hash:)","abstract":"<p>A terminal that is a range of characters. The terminal is matched when the tokenized subsequence is a character contained in this range.</p>","parent_name":"Terminal"},"Enums/Terminal.html#/s:7Covfefe8TerminalO17regularExpressionyACSo09NSRegularD0C_SitcACmF":{"name":"regularExpression(expression:hash:)","abstract":"<p>A terminal that is a regular epxression. The terminal is matched when the tokenized subsequence is contained in the language generated by the given regular expression</p>","parent_name":"Terminal"},"Enums/Terminal.html#/s:7Covfefe8TerminalO6stringACSS_tcfc":{"name":"init(string:)","abstract":"<p>Creates a terminal that is a string. The terminal is matched when the tokenized subsequence of a word is equal to this string.</p>","parent_name":"Terminal"},"Enums/Terminal.html#/s:7Covfefe8TerminalO5rangeACSNySJG_tcfc":{"name":"init(range:)","abstract":"<p>Creates a terminal that is a range of characters. The terminal is matched when the tokenized subsequence is a character contained in this range.</p>","parent_name":"Terminal"},"Enums/Terminal.html#/s:7Covfefe8TerminalO10expressionACSS_tKcfc":{"name":"init(expression:)","abstract":"<p>Creates a terminal that is a regular epxression. The terminal is matched when the tokenized subsequence is contained in the language generated by the given regular expression</p>","parent_name":"Terminal"},"Enums/Terminal.html#/s:7Covfefe8TerminalO7isEmptySbvp":{"name":"isEmpty","abstract":"<p>Indicates that this terminal matches the empty string and only the empty string.</p>","parent_name":"Terminal"},"Enums/Terminal.html#/s:s26ExpressibleByStringLiteralP06stringD0x0cD4TypeQz_tcfc":{"name":"init(stringLiteral:)","parent_name":"Terminal"},"Enums/Terminal.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"Terminal"},"Enums/Terminal.html#/s:SH9hashValueSivp":{"name":"hashValue","parent_name":"Terminal"},"Enums/Terminal.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"Terminal"},"Enums/Terminal.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"Terminal"},"Enums/Terminal.html#/s:Se4fromxs7Decoder_p_tKcfc":{"name":"init(from:)","parent_name":"Terminal"},"Enums/Terminal.html#/s:SE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","parent_name":"Terminal"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO4leafyACyxq_Gq_cAEmr0_lF":{"name":"leaf(_:)","abstract":"<p>A leaf storing a leaf element</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO4nodeyACyxq_Gx_SayAEGtcAEmr0_lF":{"name":"node(key:children:)","abstract":"<p>A node with a key and an arbitrary list of elements</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO3mapyACyqd__q_Gqd__xKXEKlF":{"name":"map(_:)","abstract":"<p>Generates a new syntax tree by applying the transform function to every key of the tree</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO8mapLeafsyACyxqd__Gqd__q_KXEKlF":{"name":"mapLeafs(_:)","abstract":"<p>Generates a new syntax tree by applying the transform function to every leaf of the tree</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO5leafsSayq_Gvp":{"name":"leafs","abstract":"<p>All leafs of the tree</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO6filteryACyxq_GSgSbxKXEKF":{"name":"filter(_:)","abstract":"<p>Filters the tree by removing all nodes and their corresponding subtrees if the given predicate is false</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO7explodeySayACyxq_GGSbxKXEKF":{"name":"explode(_:)","abstract":"<p>Explodes nodes and passes all child nodes to the parent node if the given closure returns true</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO10compressedACyxq_GyF":{"name":"compressed()","abstract":"<p>Compresses the tree by exploding nodes which have exactly one child node</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO8allNodes5whereSayACyxq_GGSbxKXE_tKF":{"name":"allNodes(where:)","abstract":"<p>Returns all nodes which match the given predicate.</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:s28CustomDebugStringConvertibleP16debugDescriptionSSvp":{"name":"debugDescription","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO3key8childrenACyxq_Gx_SayAFGtcfc":{"name":"init(key:children:)","abstract":"<p>Creates a new syntax tree node with a given key and a list of children</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO3keyACyxq_Gx_tcfc":{"name":"init(key:)","abstract":"<p>Creates a new syntax tree with a given root key and no children</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO5valueACyxq_Gq__tcfc":{"name":"init(value:)","abstract":"<p>Creates a new syntax tree with a given leaf value</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO4rootxSgvp":{"name":"root","abstract":"<p>Returns the root key of the tree or nil if no root key exists</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO4leafq_Sgvp":{"name":"leaf","abstract":"<p>Returns the value stored in the current node if the current node is a leaf. Otherwise, nil is returned</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeO8childrenSayACyxq_GGSgvp":{"name":"children","abstract":"<p>Returns the direct children of the root node</p>","parent_name":"SyntaxTree"},"Enums/SyntaxTree.html#/s:7Covfefe10SyntaxTreeOAAytRs_rlEACyxytGycfc":{"name":"init()","abstract":"<p>Creates an empty tree</p>","parent_name":"SyntaxTree"},"Enums/Symbol.html#/s:7Covfefe6SymbolO8terminalyAcA8TerminalOcACmF":{"name":"terminal(_:)","abstract":"<p>A terminal symbol</p>","parent_name":"Symbol"},"Enums/Symbol.html#/s:7Covfefe6SymbolO11nonTerminalyAcA03NonD0VcACmF":{"name":"nonTerminal(_:)","abstract":"<p>A non-terminal symbol</p>","parent_name":"Symbol"},"Enums/Symbol.html#/s:Se4fromxs7Decoder_p_tKcfc":{"name":"init(from:)","parent_name":"Symbol"},"Enums/Symbol.html#/s:SE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","parent_name":"Symbol"},"Enums/Symbol.html#/s:SH9hashValueSivp":{"name":"hashValue","parent_name":"Symbol"},"Enums/Symbol.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"Symbol"},"Enums/Symbol.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"Symbol"},"Enums/Symbol.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"Symbol"},"Enums/ABNFImportError.html#/s:7Covfefe15ABNFImportErrorO12invalidRangeyACSi_SitcACmF":{"name":"invalidRange(line:column:)","abstract":"<p>The grammar contains a range expression with a lower bound higher than the upper bound</p>","parent_name":"ABNFImportError"},"Enums/ABNFImportError.html#/s:7Covfefe15ABNFImportErrorO15invalidCharcodeyACSi_SitcACmF":{"name":"invalidCharcode(line:column:)","abstract":"<p>The grammar contains a charcode that is not a valid unicode scalar</p>","parent_name":"ABNFImportError"},"Enums/ABNFImportError.html#/s:7Covfefe15ABNFImportErrorO21invalidCharacterRangeyACSi_SitcACmF":{"name":"invalidCharacterRange(line:column:)","abstract":"<p>The grammar contains a charcode range with a lower bound higher than the upper bound</p>","parent_name":"ABNFImportError"},"Enums/ABNFImportError.html":{"name":"ABNFImportError","abstract":"<p>Errors specific to the import of ABNF grammars</p>"},"Enums/Symbol.html":{"name":"Symbol","abstract":"<p>A symbol which can either be a terminal or a non-terminal character</p>"},"Enums/SyntaxTree.html":{"name":"SyntaxTree","abstract":"<p>A tree which can store different types of values in its leafs</p>"},"Enums/Terminal.html":{"name":"Terminal","abstract":"<p>A terminal symbol which can occur in a string recognized by a parser and which cannot be"},"bnf.html":{"name":"BNF"},"Guides.html":{"name":"Guides","abstract":"<p>The following guides are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}